============
HTTP Headers
============

.. index::
   single: HTTP Headers 
   single: HTTP; HTTP Headers 

.. contents::
    :depth: 3
    :backlinks: top

####

Some headers are only used with either requests or responses, while some other general headers are
common to both.

Headers can have one or multiple values, appended after the header name and separated by a colon.

We can divide headers into the following categories:

    #. General headers
    #. Entity headers
    #. Request headers
    #. Response headers
    #. security headers

####

---------------
General Headers
---------------

**General headers** are used in both HTTP requests and responses. They are contextual and are
**used to describe the message** rather than its contents.

    - **Date** : Holds the date and time at which the message originated. It's preferred to convert
      the time to the standard UTC time zone.

        ex: Date: Wed, 16 Feb 2022 08:12:31 GMT

    
    - **Connexion** : Dictates if the current network connection should stay alive after the request
      finishes.
      
      Two commonly used values for this header are close and keep-alive. The close value from
      either the client or server means that they would like to terminate the connection, while
      the keep-alive header indicates that the connection should remain open to receive more data
      and input.

        ex: Connection: close
      
####

--------------
Entity Headers
--------------

Similar to general headers, **Entity Headers** can be common to both the request and response.
These headers are **used to describe the content** (entity) transferred by a message. They are
usually found in responses and POST or PUT requests.

    - **Content-Type** : Used to describe the type of resource being transferred. The value is
      automatically added by the browsers on the client-side and returned in the server response.
      The **charset** field denotes the encoding standard, such as UTF-8.

        ex: Content-Type: text/html; charset=UTF-8


    - **Media-Type** : Similar to the Content-Type header, and describes the data being
      transferred. This header can play a crucial role in making the server interpret our input.
      The **charset** field may also be used with this header.

        ex: Media-Type: application/pdf ; charset=UTF-8


    - **Boundary** : Acts as a marker to separate content when there is more than one in the same 
      message. For example, within a form data, this boundary gets used as --b4e4fbd93540 to
      separate different parts of the form.

        ex: Boundary="b4e4fbd93540"


    - **Content-Length** : Holds the size of the entity being passed. This header is necessary as
      the server uses it to read data from the message body, and is automatically generated by the
      browser and tools like cURL.

        ex: Content-Length: 385


    - **Content-Encoding** : Data can undergo multiple transformations before being passed. For
      example, large amounts of data can be compressed to reduce the message size. The type of
      encoding being used should be specified using the Content-Encoding header.

        ex: Content-Encoding: gzip

####

---------------
Request Headers
---------------

    .. note:: 
        
        **Liens Web**

        * `Request Header Fields`_
        
.. _`Request Header Fields`: https://datatracker.ietf.org/doc/html/rfc7231#section-5


The client sends **Request Headers** in an HTTP transaction. These headers are **used in an HTTP
request and do not relate to the content** of the message.

The following headers are commonly seen in HTTP requests :

    - **Host** : Used to specify the host being queried for the resource. This can be a domain
      name or an IP address.
      
      
      HTTP servers can be configured to host different websites, which are revealed based on the
      hostname. **This makes the host header an important enumeration target, as it can indicate the
      existence of other hosts on the target server**.

        ex: Host: www.example.com


    - **User-Agent** : The User-Agent header is used to describe the client requesting resources.
      This header can reveal a lot about the client, such as the browser, its version, and the
      operating system.

        ex: User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:97.0) Gecko/20100101 Firefox/97.0


    - **Referer** : Denotes where the current request is coming from. For example, clicking a link
      from Google search results would make https://google.com the referer. Trusting this header
      can be dangerous as it can be easily manipulated, leading to unintended consequences.

        ex: Referer: https://google.com


    - **Accept** : The Accept header describes which media types the client can understand. It can
      contain multiple media types separated by commas. The *`/`* value signifies that all media
      types are accepted.

        ex: Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,
             */*; q=0.8

    - **Cookie** : Contains cookie-value pairs in the format **name=value**. A cookie is a piece of
      data stored on the client-side and on the server, which acts as an identifier. These are
      passed to the server per request, thus maintaining the client's access. Cookies can also
      serve other purposes, such as saving user preferences or session tracking. There can be
      multiple cookies in a single header separated by a semi-colon.

        ex : Cookie: PHPSESSID=b4e4fbd93540

    - **Authorization** : Another method for the server to identify clients. After successful
      authentication, the server returns a token unique to the client. Unlike cookies, tokens are
      stored only on the client-side and retrieved by the server per request. There are multiple
      types of authentication types based on the webserver and application type used.

        ex : Authorization: Basic YWRtaW46YWRtaW4=

####

----------------
Response Headers
----------------

Response Headers can be **used in an HTTP response and do not relate to the content**. Certain
response headers such as Age, Location, and Server are used to provide more context about the
response. The following headers are commonly seen in HTTP responses.

    - **Server** : Contains information about the HTTP server, which processed the request. **It can
      be used to gain information about the server**, such as its version, and enumerate it further.

        ex : Server: Apache/2.4.41 (Ubuntu)

    - **Age** : Contains the time since the response was generated. This can be used to determine
      how long the response has been cached.

        ex : Age: 12

    - **Set-Cookie** : Contains the cookies needed for client identification. Browsers parse the
      cookies and store them for future requests. This header follows the same format as the
      Cookie request header.

        ex : Set-Cookie: PHPSESSID=b4e4fbd93540; path=/; secure; httponly


    - **WWW-Authenticate** : Notifies the client about the type of authentication required to
      access the requested resource.

        ex : WWW-Authenticate: Basic realm="localhost"


    - **Location** : Indicates the URL of the resource being redirected to. This header is used in
      HTTP responses with a 3xx status code.

        ex : Location: https://www.example.com/login


    - **Content-Type** : Indicates the media type of the resource. It helps the client to determine
      how to process the response body.

        ex : Content-Type: text/html; charset=UTF-8

    - **Content-Length** : Indicates the size of the response body in bytes.

        ex : Content-Length: 1024


    - **Cache-Control** : Tells all caching mechanisms from server to client whether they should
      cache the response.

        ex : Cache-Control: max-age=3600

####

----------------
Security Headers
----------------

Finally, we have Security Headers. With the increase in the variety of browsers and web-based
attacks, defining certain headers that enhanced security was necessary. HTTP Security headers are
**a class of response headers used to specify certain rules and policies** to be followed by the
browser while accessing the website.

    - **Content-Security-Policy** : Dictates the website's policy towards externally injected
      resources. This could be JavaScript code as well as script resources. This header instructs
      the browser to accept resources only from certain trusted domains, hence preventing attacks
      such as **Cross-site scripting (XSS)**.

        ex : Content-Security-Policy: default-src'self' \*.example.com


    - **Strict-Transport-Security** : Prevents the browser from accessing the website over the
      plaintext HTTP protocol, and forces all communication to be carried over the secure HTTPS
      protocol. This prevents attackers from sniffing web traffic and accessing protected
      information such as passwords or other sensitive data.

        ex : Strict-Transport-Security: max-age=31536000; includeSubDomains; preload


    - **Referrer-Policy** : Dictates whether the browser should include the value specified via
      the Referer header or not. It can help in avoiding disclosing sensitive URLs and information
      while browsing the website.

        ex : Referrer-Policy: origin


####

--------
Weblinks
--------

.. target-notes::