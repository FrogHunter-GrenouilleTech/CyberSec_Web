--------------------
Privilege Escalation
--------------------

.. index::
   single: Privilege Escalation
   single: Exploitation; Privilege Escalation

.. contents::
    :depth: 3
    :backlinks: top

####

The best info-sec practice is to apply **the principle of least privilege (PoLP)**. The principle of
least privilege essentially means that an object (user account, service, program etc.) should not be
given more privileges than strictly required for its purpose. Practically this means that regular
user accounts should not be able to install software or modify system configurations if theyÂ´re not
system administrators and launch applications with as few privileges as possible. 

When the principle of least privilege is applied, and a user or service account is compromised, the
effects on the systems are limited by the privileges configured for the account. This means that if
an attacker can get a shell on the system through a web service, the shell runs with the privileges
of the web service account. To get full control of the system the attacker will look for ways to
leverage vulnerabilities that allow for **privilege escalation**. Successful privilege escalation
attacks allow the attacker to take full control of the system and access all resources and data
available to it.

**Privilege escalation** is the process of increasing the level of privileges on a certain host to
the highest privilege level possible. Usually, this means that when you have access to a host with a
low privileged account, you are elevating privileges to system or domain admin on Windows or root on
Linux. Generally, privilege escalation techniques target vulnerable operating systems, services,
software and misconfigurations.

    .. note:: 
        
        **Examples of situations that allow for privilege escalation**
        
            * Vulnerable software running under root privileges.
            * Vulnerable kernels.
            * Misconfigurations in service, system and security settings.
            * Weak file and service permissions.
            * Sensitive information stored in local files.
            * Access to sensitive files such as the Windows SAM file.
            * Installation scripts and data containing passwords.
            * Scheduled tasks that execute scripts and programs.
            * DLL Hijacking by overwriting poorly secured DLLs.
            * Registry settings such as always elevated and automatically executed binaries.
            * Malware to take sensitive user input.



####

--------
Weblinks
--------

.. target-notes::